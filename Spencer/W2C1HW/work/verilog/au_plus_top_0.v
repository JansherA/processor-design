/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_plus_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  reg [15:0] sg_add;
  
  reg [15:0] sg_sub;
  
  reg [15:0] sg_mult;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_btn_add_out;
  reg [1-1:0] M_btn_add_in;
  button_conditioner_2 btn_add (
    .clk(clk),
    .in(M_btn_add_in),
    .out(M_btn_add_out)
  );
  wire [1-1:0] M_btn_sub_out;
  reg [1-1:0] M_btn_sub_in;
  button_conditioner_2 btn_sub (
    .clk(clk),
    .in(M_btn_sub_in),
    .out(M_btn_sub_out)
  );
  wire [1-1:0] M_btn_mult_out;
  reg [1-1:0] M_btn_mult_in;
  button_conditioner_2 btn_mult (
    .clk(clk),
    .in(M_btn_mult_in),
    .out(M_btn_mult_out)
  );
  wire [1-1:0] M_add_out;
  reg [1-1:0] M_add_in;
  edge_detector_3 add (
    .clk(clk),
    .in(M_add_in),
    .out(M_add_out)
  );
  wire [1-1:0] M_sub_out;
  reg [1-1:0] M_sub_in;
  edge_detector_3 sub (
    .clk(clk),
    .in(M_sub_in),
    .out(M_sub_out)
  );
  wire [1-1:0] M_mult_out;
  reg [1-1:0] M_mult_in;
  edge_detector_3 mult (
    .clk(clk),
    .in(M_mult_in),
    .out(M_mult_out)
  );
  
  reg [15:0] M_tally_d, M_tally_q = 1'h0;
  wire [8-1:0] M_seg_display_seg;
  wire [4-1:0] M_seg_display_sel;
  reg [16-1:0] M_seg_display_values;
  multi_seven_seg_4 seg_display (
    .clk(clk),
    .rst(rst),
    .values(M_seg_display_values),
    .seg(M_seg_display_seg),
    .sel(M_seg_display_sel)
  );
  
  always @* begin
    M_tally_d = M_tally_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_btn_add_in = io_button[4+0-:1];
    M_btn_sub_in = io_button[3+0-:1];
    M_btn_mult_in = io_button[2+0-:1];
    M_add_in = M_btn_add_out;
    M_sub_in = M_btn_sub_out;
    M_mult_in = M_btn_mult_out;
    sg_add = M_tally_q + {io_dip[8+7-:8], io_dip[0+7-:8]};
    sg_sub = M_tally_q - {io_dip[8+7-:8], io_dip[0+7-:8]};
    sg_mult = M_tally_q * {io_dip[8+7-:8], io_dip[0+7-:8]};
    if (M_add_out) begin
      M_tally_d = sg_add;
    end else begin
      if (M_sub_out) begin
        M_tally_d = sg_sub;
      end else begin
        if (M_mult_out) begin
          M_tally_d = sg_mult;
        end
      end
    end
    M_seg_display_values = {M_tally_q[12+3-:4], M_tally_q[8+3-:4], M_tally_q[4+3-:4], M_tally_q[0+3-:4]};
    io_seg = ~M_seg_display_seg;
    io_sel = ~M_seg_display_sel;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_tally_q <= 1'h0;
    end else begin
      M_tally_q <= M_tally_d;
    end
  end
  
endmodule
