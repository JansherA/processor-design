module greeter (
    input clk,         // clock
    input rst,         // reset
    input new_rx,      // new RX flag
    input rx_data[8],  // RX data
    output new_tx,     // new TX flag
    output tx_data[8], // TX data
    input tx_busy      // TX is busy flag
  ) {
  
  const HELLO_TEXT = $reverse("\r\nHowdy @!\r\n"); 
  const PROMPT_TEXT = $reverse("Please type your name: ");
  
  .clk(clk) {
    .rst(rst) {
      fsm state = {IDLE, PROMPT, LISTEN, HELLO}; // state machine
    }
    
    dff hello_count[$clog2(HELLO_TEXT.WIDTH[0])]; // WIDTH[0] gets the first dimension
    dff prompt_count[$clog2(PROMPT_TEXT.WIDTH[0])];
    dff name_count[5]; 
    
    simple_ram ram (#SIZE(8), #DEPTH($pow(2,name_count.WIDTH)));
  }
  
  always {
    ram.address = name_count.q; // use name_count as the address
    ram.write_data = 8hxx;      
    ram.write_en = 0;           
    new_tx = 0;                
    tx_data = 8hxx;             
    
    case (state.q) { // FSM
    
      // IDLE: 
      state.IDLE:
        hello_count.d = 0;
        prompt_count.d = 0;
        name_count.d = 0;
        if (new_rx) // wait for any letter
          state.d = state.PROMPT;
      
      // PROMPT: 
      state.PROMPT:
        if (!tx_busy) {
          prompt_count.d = prompt_count.q + 1;   // move to the next letter
          new_tx = 1;                            // send data
          tx_data = PROMPT_TEXT[prompt_count.q]; // send letter from PROMPT_TEXT
          if (prompt_count.q == PROMPT_TEXT.WIDTH[0] - 1) 
            state.d = state.LISTEN;              // change states
        }
      
      // LISTEN:
      state.LISTEN:
        if (new_rx) { // wait for a new byte
          ram.write_data = rx_data;        // write the received letter to RAM
          ram.write_en = 1;                // signal we want to write
          name_count.d = name_count.q + 1; // increment the address
          
          // DON'T TYPE AT INHUMAN SPEEDS 
          new_tx = rx_data != "\n" && rx_data != "\r"; // only echo non-new line characters
          tx_data = rx_data; // echo text back so you can see what you type
          
          // if we run out of space or they pressed enter
          if (&name_count.q || rx_data == "\n" || rx_data == "\r") {
            state.d = state.HELLO;
            name_count.d = 0; // reset name_count
          }
        }
      
      // HELLO: 
      state.HELLO:
        if (!tx_busy) { // wait for tx to not be busy
          if (HELLO_TEXT[hello_count.q] != "@") { // if we are not at the sentry
            hello_count.d = hello_count.q + 1;    // increment to next letter
            new_tx = 1;                           // new data to send
            tx_data = HELLO_TEXT[hello_count.q];  // send the letter
          } else {                                // we are at the sentry
            name_count.d = name_count.q + 1;      // increment the name_count letter
            
            if (ram.read_data != "\n" && ram.read_data != "\r") 
              new_tx = 1;                                       // send data
            
            tx_data = ram.read_data;              // send the letter from the RAM
            
            if (ram.read_data == "\n" || ram.read_data == "\r" || &name_count.q) {
              hello_count.d = hello_count.q + 1;  // increment hello_count to pass the sentry
            }
          }
          
          if (hello_count.q == HELLO_TEXT.WIDTH[0] - 1)
            state.d = state.IDLE; 
        }
    }
  }
}